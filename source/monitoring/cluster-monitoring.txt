.. _ruby-cluster-monitoring:

==================
Cluster Monitoring
==================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, server, topology

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

The driver allows the application to be notified when certain events happen. These 
events are organized into the following categories:

- Command Monitoring

- Server Discovery and Monitoring (SDAM) 

- Connection Pools and Connections

Command Monitoring
------------------

All user-initiated commands that are sent to the server publish event
information. You can subscribe to these commands to read event information.

A subscriber must implement the following three methods: 

- ``started``
- ``succeeded``
- ``failed``, each which takes a single parameter for the event. 

The following is an example logging subscriber based on a logging subscriber 
used internally by the driver:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-command-logging
   :end-before: end-command-logging
   :language: ruby
   :copyable:
   :dedent:

To register a custom subscriber, you can do so globally for all clients or 
on a per-client basis:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-command-subscriber
   :end-before: end-command-subscriber
   :language: ruby
   :copyable:
   :dedent:

Sample output:

.. code-block:: none

  D, [2018-09-23T13:47:31.258020 #4692] DEBUG -- : COMMAND | 127.0.0.1:27027 | test.hello | STARTED | {"hello"=>1, "$readPreference"=>{"mode"=>"primary"}, "lsid"=>{"id"=><BSON::Binary:0x47111693353080 type=uuid data=0x730341e880dc40a2...>}}
  D, [2018-09-23T13:47:31.259145 #4692] DEBUG -- : COMMAND | 127.0.0.1:27027 | test.hello | SUCCEEDED | 0.000791175s

SDAM
----

The Ruby driver implements `Server Discovery And Monitoring (SDAM) specification
<https://github.com/mongodb/specifications/tree/master/source/server-discovery-and-monitoring>`_.
and makes the following events available to the application:

- Topology opening
- Server opening
- Server description changed
- Topology changed
- Server closed
- Topology closed
- Heartbeat events (covered below in a separate section)

For all events other than the heartbeat events, the ``succeeded`` method
will be called on each event subscriber with the event as the sole argument.
Available data for events varies, therefore to log the events a separate
class is needed for each event type. A simple SDAM logging subscriber
can look like the following:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-sdam
   :end-before: end-sdam
   :language: ruby
   :copyable:
   :dedent:

To subscribe to SDAM events globally:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-sdam-subscriber-global
   :end-before: end-sdam-subscriber-global
   :language: ruby
   :copyable:
   :dedent:

To subscribe to SDAM events for a single client by using the ``sdam-proc`` client option:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-sdam-subscriber-client
   :end-before: end-sdam-subscriber-client
   :language: ruby
   :copyable:
   :dedent:

Sample output:

.. code-block:: none

  D, [2018-10-09T13:58:03.489461 #22079] DEBUG -- : SDAM | Topology type 'Unknown' initializing.
  D, [2018-10-09T13:58:03.489699 #22079] DEBUG -- : SDAM | Server 127.0.0.1:27100 initializing.
  D, [2018-10-09T13:58:03.491384 #22079] DEBUG -- : SDAM | Server description for 127.0.0.1:27100 changed from 'unknown' to 'unknown'.
  D, [2018-10-09T13:58:03.491642 #22079] DEBUG -- : SDAM | Server localhost:27100 initializing.
  D, [2018-10-09T13:58:03.493199 #22079] DEBUG -- : SDAM | Server description for localhost:27100 changed from 'unknown' to 'primary'.
  D, [2018-10-09T13:58:03.493473 #22079] DEBUG -- : SDAM | Server localhost:27101 initializing.
  D, [2018-10-09T13:58:03.494874 #22079] DEBUG -- : SDAM | Server description for localhost:27101 changed from 'unknown' to 'secondary'.
  D, [2018-10-09T13:58:03.495139 #22079] DEBUG -- : SDAM | Server localhost:27102 initializing.
  D, [2018-10-09T13:58:03.496504 #22079] DEBUG -- : SDAM | Server description for localhost:27102 changed from 'unknown' to 'secondary'.
  D, [2018-10-09T13:58:03.496777 #22079] DEBUG -- : SDAM | Topology type 'Unknown' changed to type 'ReplicaSetNoPrimary'.
  D, [2018-10-09T13:58:03.497306 #22079] DEBUG -- : SDAM | Server 127.0.0.1:27100 connection closed.
  D, [2018-10-09T13:58:03.497606 #22079] DEBUG -- : SDAM | Topology type 'ReplicaSetNoPrimary' changed to type 'ReplicaSetWithPrimary'.

  # client.close

  D, [2018-10-09T13:58:05.342057 #22079] DEBUG -- : SDAM | Server localhost:27100 connection closed.
  D, [2018-10-09T13:58:05.342299 #22079] DEBUG -- : SDAM | Server localhost:27101 connection closed.
  D, [2018-10-09T13:58:05.342565 #22079] DEBUG -- : SDAM | Server localhost:27102 connection closed.
  D, [2018-10-09T13:58:05.342693 #22079] DEBUG -- : SDAM | Topology type 'ReplicaSetWithPrimary' closed.

.. note::

  ``:sdam_proc`` client option applies only to the client during whose
  construction it is given. When certain client options are changed via the
  ``Client#with`` call, a new cluster may be created by the driver with
  a default set of event subscribers. If this happens, the provided
  ``:sdam_proc`` is not called and the application may miss events.

SDAM Event Descriptions
~~~~~~~~~~~~~~~~~~~~~~~

Connection Pools and Connections
--------------------------------

Each client maintains a connection pool for each server in the deployment that
it is aware of, and publishes events for both connection pools and individual
connections. To subscribe to these events, define a subscriber class implementing
the method ``pubished`` which takes a single parameter for the event that
is being published. Note that future versions of the driver may introduce
additional events published through this mechanism.

The following events are currently implemented by the driver, following
the `CMAP specification <https://github.com/mongodb/specifications/blob/master/source/connection-monitoring-and-pooling/connection-monitoring-and-pooling.md>`_:

- PoolCreated
- PoolCleared
- PoolClosed
- ConnectionCreated
- ConnectionReady
- ConnectionClosed
- ConnectionCheckOutStarted
- ConnectionCheckOutFailed
- ConnectionCheckOutSucceeded
- ConnectionCheckedIn

The driver provides a logging subscriber which may be used to log all
connection pool and connection-related events. This subscriber is not enabled
by default because it will create log entries for each operation performed
by the application. To enable this subscriber globally or per client:

.. code-block:: ruby

  Mongo::Monitoring::Global.subscribe(
    Mongo::Monitoring::CONNECTION_POOL,
    Mongo::Monitoring::CmapLogSubscriber.new)

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'test' )
  subscriber = Mongo::Monitoring::CmapLogSubscriber.new
  client.subscribe( Mongo::Monitoring::CONNECTION_POOL, subscriber )

Sample output:

.. code-block:: none

  D, [2019-05-06T17:23:21.595412 #8576] DEBUG -- : MONGODB | EVENT: #<PoolCreated address=127.0.0.1:27741 options={...}>
  D, [2019-05-06T17:23:21.595584 #8576] DEBUG -- : MONGODB | EVENT: #<PoolCleared address=127.0.0.1:27741>
  D, [2019-05-06T17:23:21.603549 #8576] DEBUG -- : MONGODB | EVENT: #<PoolCreated address=localhost:27741 options={...}>
  D, [2019-05-06T17:23:21.603616 #8576] DEBUG -- : MONGODB | EVENT: #<ConnectionCheckOutStarted address=localhost:27741>
  D, [2019-05-06T17:23:21.603684 #8576] DEBUG -- : MONGODB | EVENT: #<ConnectionCreated address=localhost:27741 connection_id=1>
  D, [2019-05-06T17:23:21.604079 #8576] DEBUG -- : MONGODB | EVENT: #<ConnectionCheckedOut address=localhost:27741 connection_id=1>
  D, [2019-05-06T17:23:21.605759 #8576] DEBUG -- : MONGODB | EVENT: #<ConnectionReady address=localhost:27741 connection_id=1>
  D, [2019-05-06T17:23:21.605784 #8576] DEBUG -- : MONGODB | EVENT: #<ConnectionCheckedIn address=localhost:27741 connection_id=1>
  D, [2019-05-06T17:23:21.605817 #8576] DEBUG -- : MONGODB | EVENT: #<PoolCleared address=localhost:27741>
  D, [2019-05-06T17:23:21.605852 #8576] DEBUG -- : MONGODB | EVENT: #<ConnectionClosed address=localhost:27741 connection_id=1 reason=stale>

Disabling Monitoring
--------------------

To turn off monitoring, set the client monitoring option to ``false``:

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'test', :monitoring => false )








