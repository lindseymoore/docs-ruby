.. _ruby-cluster-monitoring:

==================
Cluster Monitoring
==================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, server, topology

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecols

Overview
--------

This guide shows you how to use the {+driver-short+} to monitor server discovery 
and monitoring (SDAM) events events in a MongoDB instance, replica set, or sharded 
cluster by using custom subscribers or available subscriber methods. These events 
occur when there are any changes in the state of the MongoDB instance or cluster 
that you are connected to.

You can use information about SDAM events in your application to understand 
cluster changes, assess cluster health, or perform capacity planning.

Available SDAM Subscribers
--------------------------

You can use the {+driver-short+}'s ``subscribe`` method to subscribe to events. 
The ``subscribe`` method requires you to specify a monitoring ``topic`` 
(the event type) and a subscriber object.

The following code uses the ``CommandLogSubscriber`` to monitor command events:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-available-subscriber
   :end-before: end-available-subscriber
   :language: ruby
   :copyable:
   :dedent:

The following table provides available subscribers and their event types: 

.. list-table::
   :header-rows: 1
   :widths: 20 20 60

   * - Method Name
     - Monitoring Topic
     - Description 

   * - `SDAMLogSubscriber <{+api-root+}/Mongo/Monitoring/SDAMLogSubscriber.html>`__
     - 
     - Subscribes to SDAM events and logs them.

   * - `ServerClosedLogSubscriber <{+api-root+}/Mongo/Monitoring/ServerClosedLogSubscriber.html>`__
     - ``SERVER_CLOSED``
     - Subscribes to Server Closed events and logs them.

   * - `ServerDescriptionChangedLogSubscriber <{+api-root+}/Mongo/Monitoring/ServerDescriptionChangedLogSubscriber.html>`__
     - ``SERVER_DESCRIPTION_CHANGED``
     - Subscribes to Server Description Changed events and logs them.

   * - `ServerOpeningLogSubscriber <{+api-root+}/Mongo/Monitoring/ServerOpeningLogSubscriber.html>`__ 
     - ``SERVER_OPENING``
     - Subscribes to Server Opening events and logs them.

   * - `TopologyChangedLogSubscriber <{+api-root+}/Mongo/Monitoring/TopologyChangedLogSubscriber.html>`__
     - ``TOPOLOGY_CHANGED``
     - Subscribes to Topology Changed events and logs them.

   * - `TopologyClosedLogSubscriber <{+api-root+}/Mongo/Monitoring/TopologyClosedLogSubscriber.html>`__
     - ``TOPOLOGY_CLOSED``
     - Subscribes to Topology Closed events and logs them.

   * - `TopologyOpeningLogSubscriber <{+api-root+}/Mongo/Monitoring/TopologyOpeningLogSubscriber.html>`__
     - ``TOPOLOGY_OPENING``
     - Subscribes to Topology Opening events and logs them.

Custom Command Monitoring
-------------------------

You can create a custom command subscriber to access details about server
and topology events.

A subscriber must implement the following three methods: 

- ``started``: Response when you initiate the command
- ``succeeded``: Response when the command succeeds
- ``failed``: Response when the command fails

The following is an example command logging subscriber:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-command-logging
   :end-before: end-command-logging
   :language: ruby
   :copyable:
   :dedent:

To register a custom subscriber, you can do so globally for all clients or 
on a per-client basis:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-command-subscriber
   :end-before: end-command-subscriber
   :language: ruby
   :copyable:
   :dedent:

When you run the application, your subscriber records the commands' event information  
and outputs logs such as the following:

.. code-block:: none

  D, [2018-09-23T13:47:31.258020 #4692] DEBUG -- : COMMAND | 127.0.0.1:27027 | test.hello | STARTED | {"hello"=>1, "$readPreference"=>{"mode"=>"primary"}, "lsid"=>{"id"=><BSON::Binary:0x47111693353080 type=uuid data=0x730341e880dc40a2...>}}
  D, [2018-09-23T13:47:31.259145 #4692] DEBUG -- : COMMAND | 127.0.0.1:27027 | test.hello | SUCCEEDED | 0.000791175s

Custom SDAM Monitoring
----------------------

You can create a custom command subscriber to access details about server
and topology events.

A subscriber must implement the following three methods: 

- ``started``: Response when you initiate the command
- ``succeeded``: Response when the command succeeds
- ``failed``: Response when the command fails

Available data for events varies, therefore to log the events a separate
class is needed for each event type. A simple SDAM logging subscriber
can look like the following:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-sdam
   :end-before: end-sdam
   :language: ruby
   :copyable:
   :dedent:

To subscribe to SDAM events globally:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-sdam-subscriber-global
   :end-before: end-sdam-subscriber-global
   :language: ruby
   :copyable:
   :dedent:

To subscribe to SDAM events for a single client by using the ``sdam-proc`` client option:

.. literalinclude:: /includes/monitoring/monitoring.rb
   :start-after: start-sdam-subscriber-client
   :end-before: end-sdam-subscriber-client
   :language: ruby
   :copyable:
   :dedent:

Sample output:

.. code-block:: none

  D, [2018-10-09T13:58:03.489461 #22079] DEBUG -- : SDAM | Topology type 'Unknown' initializing.
  D, [2018-10-09T13:58:03.489699 #22079] DEBUG -- : SDAM | Server 127.0.0.1:27100 initializing.
  D, [2018-10-09T13:58:03.491384 #22079] DEBUG -- : SDAM | Server description for 127.0.0.1:27100 changed from 'unknown' to 'unknown'.
  D, [2018-10-09T13:58:03.491642 #22079] DEBUG -- : SDAM | Server localhost:27100 initializing.
  D, [2018-10-09T13:58:03.493199 #22079] DEBUG -- : SDAM | Server description for localhost:27100 changed from 'unknown' to 'primary'.
  D, [2018-10-09T13:58:03.493473 #22079] DEBUG -- : SDAM | Server localhost:27101 initializing.
  D, [2018-10-09T13:58:03.494874 #22079] DEBUG -- : SDAM | Server description for localhost:27101 changed from 'unknown' to 'secondary'.
  D, [2018-10-09T13:58:03.495139 #22079] DEBUG -- : SDAM | Server localhost:27102 initializing.
  D, [2018-10-09T13:58:03.496504 #22079] DEBUG -- : SDAM | Server description for localhost:27102 changed from 'unknown' to 'secondary'.
  D, [2018-10-09T13:58:03.496777 #22079] DEBUG -- : SDAM | Topology type 'Unknown' changed to type 'ReplicaSetNoPrimary'.
  D, [2018-10-09T13:58:03.497306 #22079] DEBUG -- : SDAM | Server 127.0.0.1:27100 connection closed.
  D, [2018-10-09T13:58:03.497606 #22079] DEBUG -- : SDAM | Topology type 'ReplicaSetNoPrimary' changed to type 'ReplicaSetWithPrimary'.

  # client.close

  D, [2018-10-09T13:58:05.342057 #22079] DEBUG -- : SDAM | Server localhost:27100 connection closed.
  D, [2018-10-09T13:58:05.342299 #22079] DEBUG -- : SDAM | Server localhost:27101 connection closed.
  D, [2018-10-09T13:58:05.342565 #22079] DEBUG -- : SDAM | Server localhost:27102 connection closed.
  D, [2018-10-09T13:58:05.342693 #22079] DEBUG -- : SDAM | Topology type 'ReplicaSetWithPrimary' closed.

.. note::

  ``:sdam_proc`` client option applies only to the client during whose
  construction it is given. When certain client options are changed via the
  ``Client#with`` call, a new cluster may be created by the driver with
  a default set of event subscribers. If this happens, the provided
  ``:sdam_proc`` is not called and the application may miss events.

Event Descriptions
------------------

.. figure out what to do with this

The Ruby driver implements `Server Discovery And Monitoring (SDAM) specification
<https://github.com/mongodb/specifications/tree/master/source/server-discovery-and-monitoring>`_.
and makes the following events available to the application:

- Topology opening
- Server opening
- Server description changed
- Topology changed
- Server closed
- Topology closed
- Heartbeat events (covered below in a separate section)

You can monitor the following SDAM events:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Event Type
     - Description 

   * - `ServerClosed <{+api-root+}/Mongo/Monitoring/Event/ServerClosed.html>`__
     - Event fired when the server is closed.

   * - `ServerDescriptionChanged <{+api-root+}/Mongo/Monitoring/Event/ServerDescriptionChanged.html>`__
     - Event fired when a server's description changes.

   * - `ServerHeartbeatFailed <{+api-root+}/Mongo/Monitoring/Event/ServerHeartbeatFailed.html>`__
     - Event fired when a server heartbeat fails.

   * - `ServerHeartbeatStarted <{+api-root+}/Mongo/Monitoring/Event/ServerHeartbeatStarted.html>`__ 
     - Event fired when a server heartbeat is dispatched.

   * - `ServerHeartbeatSucceeded <{+api-root+}/Mongo/Monitoring/Event/ServerHeartbeatSucceeded.html>`__ 
     - Event fired when a server heartbeat successfully returns.

   * - `ServerOpening <{+api-root+}/Mongo/Monitoring/Event/ServerOpening.html>`__ 
     - Event fired when the driver connects to the server.

   * - `TopologyChanged <{+api-root+}/Mongo/Monitoring/Event/TopologyChanged.html>`__ 
     - Event fired when the topology changes.

   * - `TopologyClosed <{+api-root+}/Mongo/Monitoring/Event/TopologyClosed.html>`__ 
     - Event fired when all instance connections in the topology close.

   * - `TopologyOpening <{+api-root+}/Mongo/Monitoring/Event/TopologyOpening.html>`__ 
     - Event fired before the driver attempts to connect to an instance.

API Documentation
-----------------

To learn more about any of the methods discussed in this guide, see the following API documentation:

- `Mongo::Monitoring::Event <{+api-root+}/Mongo/Monitoring/Event.html>`__

.. event descriptions table, reread for active voice, api doc section, remove unnecessary code
